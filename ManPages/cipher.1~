.\" Manpage for DamOS Cipher.
.\" Contact puckowski.d@gmail.com to correct errors or typos.

.TH man 8 "05 April 2014" "3.5" "DamOS Cipher man page"

.SH NAME
DamOS Cipher \- This program can be used to encrypt files or run-time variables.

.SH SYNOPSIS
General usage format:

./loe <KEY FILE> <OPERATION> <OPERATION>

The <KEY FILE> may just be a plain-text key defined at run-time.

DamOS Cipher example usage ("loe" is the name of the executable):

./loe key.txt -e "I want to encrypt this text."
./loe key.txt -v -w -D
./loe inlineKey0xFF99 -e OneWordToEncrypt
./loe key.txt -dcf -e "Testing encryption." -ecf

.SH DESCRIPTION
DamOS Cipher 

This program conceals the contents of plain-text data using one of four cipher methods:
XOR cipher, Tiny Encryption Algorithm (TEA), Extended TEA (XTEA), or Corrected Block TEA (XXTEA).

Usage notes: Order matters! The program will interpret commands from left to right. Therefore, if you need to unencrypt configuration files before you use them, make sure the command "-dcf" appears before any encryption/decryption operation such as "-e".

Program Configuration
 
Inside the directory of this program's executable must be the following files:

key.txt -- Specifies the "key" to use for encryption/decryption. The entire key must be on one line (first line in file). The key may contain spaces and does not need to be wrapped in quotes.

blacklist.txt -- This file specifies files the program is to ignore when encrypting/decrypting the directory. In order for the program to operate correctly a few filenames must be specified within the file, where each filename gets its own line in the file. Here are the filenames required to start:

.
..
key.txt
loe.exe (or whatever you have named this program's executable)
blacklist.txt
extensions.txt
				 
Note: The filenames above are not required (and should actually be removed) if you intend to
encrypt the directory using the blacklist as a whitelist file only (with the -w argument).
Manage the names in this file accordingly. Failing to do so may cause irreversible damage to files.
				 
extensions.txt -- This file specifies file extensions the program is to ignore when encrypting/decrypting the directory. The format of this file is similar to the format of the blacklist file. Each extension gets its own line in the file. An example would look like:

.bat
.sh
				  
Always configure this program and test it using a copy of a directory you eventually intend to encrypt.
This way you ensure you have configured all the appropriate files for your scenario without causing
irreversible damage to any of your original files. 

Here is a quick summary of the four cipher methods (from Wikipedia):

XOR cipher
In cryptography, the simple XOR cipher is a type of additive cipher, an encryption algorithm that operates according to the principles:
A ^ 0 = A,
A ^ A = 0,
(A ^ B) ^ C = A ^ (B ^ C),
(B ^ A) ^ A = B ^ 0 = B,
where ^ denotes the exclusive disjunction (XOR) operation. This operation is sometimes called modulus 2 addition (or subtraction, which is identical). With this logic, a string of text can be encrypted by applying the bitwise XOR operator to every character using a given key. To decrypt the output, merely reapplying the XOR function with the key will remove the cipher.

TEA cipher
In cryptography, the Tiny Encryption Algorithm (TEA) is a block cipher notable for its simplicity of description and implementation, typically a few lines of code. It was designed by David Wheeler and Roger Needham of the Cambridge Computer Laboratory; it was first presented at the Fast Software Encryption workshop in Leuven in 1994, and first published in the proceedings of that workshop.
The cipher is not subject to any patents.

XTEA cipher
In cryptography, XTEA (eXtended TEA) is a block cipher designed to correct weaknesses in TEA. 
The cipher's designers were David Wheeler and Roger Needham of the Cambridge Computer 
Laboratory, and the algorithm was presented in an unpublished technical report in 1997 (Needham and Wheeler, 1997). It is not subject to any patents. Like TEA, XTEA is a 64-bit block Feistel 
network with a 128-bit key and a suggested 64 rounds. Several differences from TEA are apparent, 
including a somewhat more complex key-schedule and a rearrangement of the shifts, XORs, and 
additions.

Presented along with XTEA was a variable-width block cipher termed Block TEA, which uses the 
XTEA round function, but Block TEA applies it cyclically across an entire message for several   
iterations. Because it operates on the entire message, Block TEA has the property that it does 
not need a mode of operation. An attack on the full Block TEA was described in (Saarinen, 1998),
which also details a weakness in Block TEA's successor, XXTEA.

XXTEA cipher
In cryptography, Corrected Block TEA (often referred to as XXTEA) is a block cipher designed to 
correct weaknesses in the original Block TEA.

XXTEA is vulnerable to a chosen-plaintext attack requiring 259 queries and negligible work. See 
cryptanalysis below.

The cipher's designers were Roger Needham and David Wheeler of the Cambridge Computer  
Laboratory, and the algorithm was presented in an unpublished technical report in October 1998  
(Wheeler and Needham, 1998). It is not subject to any patents.

Formally speaking, XXTEA is a consistent incomplete source-heavy heterogeneous UFN (unbalanced 
Feistel network) block cipher. XXTEA operates on variable-length blocks that are some arbitrary  
multiple of 32 bits in size (minimum 64 bits). The number of full cycles depends on the block 
size, but there are at least six (rising to 32 for small block sizes). The original Block TEA 
applies the XTEA round function to each word in the block and combines it additively with its 
leftmost neighbour. Slow diffusion rate of the decryption process was immediately exploited to 
break the cipher. Corrected Block TEA uses a more involved round function which makes use of   
both immediate neighbours in processing each word in the block.

XXTEA is likely to be more efficient than XTEA for longer messages.

Needham & Wheeler make the following comments on the use of Block TEA:

For ease of use and general security the large block version is to be preferred when applicable 
for the following reasons.

1.) A single bit change will change about one half of the bits of the entire block, leaving no 
place where the changes start.
2.) There is no choice of mode involved.
3.) Even if the correct usage of always changing the data sent (possibly by a message number) is employed, only identical messages give the same result and the information leakage is minimal.
4.) The message number should always be checked as this redundancy is the check against a random 
message being accepted.
5.) Cut and join attacks do not appear to be possible.
6.) If it is not acceptable to have very long messages, they can be broken into chunks say of 60 
words and chained analogously to the methods used for DES.

However, due to the incomplete nature of the round function, two large ciphertexts of 53 or more 
32-bit words identical in all but 12 words can be found by a simple brute-force collision search 
requiring 296−N memory, 2N time and 2N+296−N chosen plaintexts, in other words with a total 
time*memory complexity of 296, which is actually 2wordsize*fullcycles/2 for any such cipher. It 
is currently unknown if such partial collisions pose any threat to the security of the cipher. 
Eight full cycles would raise the bar for such collision search above complexity of parallel 
brute-force attacks.

The unusually small size of the XXTEA algorithm would make it a viable option in situations 
where there are extreme constraints e.g. legacy hardware systems (perhaps embedded) where the 
amount of available RAM is minimal.

.SH OPTIONS

-e Use this argument to encrypt text passed to this program via a terminal or script. 

-d Use this argument to decrypt text passed to this program via a terminal or script.

-E Use this argument to encrypt every file within the directory of this executable.

-D Use this argument to decrypt every file within the directory of this executable.

-v Enables verbose mode. The program will provide more specific information to the terminal about the operation that is currently executing.

-w Enables whitelist mode. Using this mode will make the program treat the blacklist file as a whitelist file instead to determine which files to encrypt/decrypt and which files to ignore.

-ecf Encrypt the configuration files using a predetermined encryption key defined in the program source.

-dcf Decrypt the configuration files using a predetermined encryption key defined in the program source.

.SH SEE ALSO

Program is compiled with g++ and the make utility.

.SH BUGS

No known bugs.

.SH AUTHOR

Daniel Puckowski (puckowski.d@gmail.com)
